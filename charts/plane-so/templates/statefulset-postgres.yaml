apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "plane-so.fullname" . }}-postgres
  labels:
    {{- include "plane-so.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "plane-so.selectorLabels" . | nindent 6 }}
      plane.so/component: postgres
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "plane-so.selectorLabels" . | nindent 8 }}
        plane.so/component: postgres
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: {{ include "plane-so.fullname" . }}-postgres
      containers:
        - name: {{ .Chart.Name }}
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "plane-so.fullname" . }}-env
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "plane-so.fullname" . }}-env
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ include "plane-so.fullname" . }}-env
                  key: POSTGRES_DB
            - name: PGDATA
              valueFrom:
                secretKeyRef:
                  name: {{ include "plane-so.fullname" . }}-env
                  key: PGDATA
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.postgres.repository }}:{{ .Values.image.postgres.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.image.postgres.pullPolicy }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          command:
            - bash
          args:
            - -c
            - 'mkdir $PGDATA && postgres -c max_connections=1000'
          ports:
            - name: postgres
              containerPort: {{ .Values.service.postgres.port }}
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - pg_isready
              - -h
              - localhost
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - pg_isready
              - -h
              - localhost
          resources:
            {{- toYaml .Values.resources.postgres | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
